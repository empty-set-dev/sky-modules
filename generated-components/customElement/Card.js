/**
 * Usage:
 *
 *  <card></card>
 *
 */
class Card extends HTMLElement {
  get _root() {
    return this.shadowRoot || this;
  }

  constructor() {
    super();
    const self = this;

    this.state = {
      isHovered: false,
      handleMouseEnter() {
        if (self.props.hoverable) {
          self.state.isHovered = true;
          self.update();
        }
      },
      handleMouseLeave() {
        if (self.props.hoverable) {
          self.state.isHovered = false;
          self.update();
        }
      },
    };
    if (!this.props) {
      this.props = {};
    }

    this.componentProps = [
      "hoverable",
      "onClick",
      "className",
      "image",
      "title",
      "subtitle",
      "children",
    ];

    // used to keep track of all nodes created by show/for
    this.nodesToDestroy = [];
    // batch updates
    this.pendingUpdate = false;

    // Event handler for 'mouseenter' event on div-card-1
    this.onDivCard1Mouseenter = (event) => {
      this.state.handleMouseEnter();
    };

    // Event handler for 'mouseleave' event on div-card-1
    this.onDivCard1Mouseleave = (event) => {
      this.state.handleMouseLeave();
    };

    // Event handler for 'click' event on div-card-1
    this.onDivCard1Click = (event) => {
      this.props.onClick();
    };

    if (undefined) {
      this.attachShadow({ mode: "open" });
    }
  }

  destroyAnyNodes() {
    // destroy current view template refs before rendering again
    this.nodesToDestroy.forEach((el) => el.remove());
    this.nodesToDestroy = [];
  }

  connectedCallback() {
    this.getAttributeNames().forEach((attr) => {
      const jsVar = attr.replace(/-/g, "");
      const regexp = new RegExp(jsVar, "i");
      this.componentProps.forEach((prop) => {
        if (regexp.test(prop)) {
          const attrValue = this.getAttribute(attr);
          if (this.props[prop] !== attrValue) {
            this.props[prop] = attrValue;
          }
        }
      });
    });

    this._root.innerHTML = `
      <div data-el="div-card-1">
        <template data-el="show-card"><img data-el="img-card-1" /></template>
        <template data-el="show-card-2">
          <h3 data-el="h3-card-1">
            <template data-el="div-card-2"><!-- props.title --></template>
          </h3>
        </template>
        <template data-el="show-card-3">
          <p data-el="p-card-1">
            <template data-el="div-card-3"><!-- props.subtitle --></template>
          </p>
        </template>
        <template data-el="show-card-4">
          <div><slot></slot></div>
        </template>
      </div>`;
    this.pendingUpdate = true;

    this.render();
    this.onMount();
    this.pendingUpdate = false;
    this.update();
  }

  showContent(el) {
    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement/content
    // grabs the content of a node that is between <template> tags
    // iterates through child nodes to register all content including text elements
    // attaches the content after the template

    const elementFragment = el.content.cloneNode(true);
    const children = Array.from(elementFragment.childNodes);
    children.forEach((child) => {
      if (el?.scope) {
        child.scope = el.scope;
      }
      if (el?.context) {
        child.context = el.context;
      }
      this.nodesToDestroy.push(child);
    });
    el.after(elementFragment);
  }

  onMount() {}

  onUpdate() {}

  update() {
    if (this.pendingUpdate === true) {
      return;
    }
    this.pendingUpdate = true;
    this.render();
    this.onUpdate();
    this.pendingUpdate = false;
  }

  render() {
    // re-rendering needs to ensure that all nodes generated by for/show are refreshed
    this.destroyAnyNodes();
    this.updateBindings();
  }

  updateBindings() {
    this._root.querySelectorAll("[data-el='div-card-1']").forEach((el) => {
      Object.assign(el.style, cardStyle);
      el.removeEventListener("mouseenter", this.onDivCard1Mouseenter);
      el.addEventListener("mouseenter", this.onDivCard1Mouseenter);
      el.removeEventListener("mouseleave", this.onDivCard1Mouseleave);
      el.addEventListener("mouseleave", this.onDivCard1Mouseleave);
      el.removeEventListener("click", this.onDivCard1Click);
      el.addEventListener("click", this.onDivCard1Click);
      el.className = this.props.className;
    });

    this._root.querySelectorAll("[data-el='show-card']").forEach((el) => {
      const whenCondition = this.props.image;
      if (whenCondition) {
        this.showContent(el);
      }
    });

    this._root.querySelectorAll("[data-el='img-card-1']").forEach((el) => {
      el.setAttribute("src", this.props.image);
      el.setAttribute("alt", this.props.title || "Card image");
      Object.assign(el.style, imageStyle);
    });

    this._root.querySelectorAll("[data-el='show-card-2']").forEach((el) => {
      const whenCondition = this.props.title;
      if (whenCondition) {
        this.showContent(el);
      }
    });

    this._root.querySelectorAll("[data-el='h3-card-1']").forEach((el) => {
      Object.assign(el.style, titleStyle);
    });

    this._root.querySelectorAll("[data-el='div-card-2']").forEach((el) => {
      this.renderTextNode(el, this.props.title);
    });

    this._root.querySelectorAll("[data-el='show-card-3']").forEach((el) => {
      const whenCondition = this.props.subtitle;
      if (whenCondition) {
        this.showContent(el);
      }
    });

    this._root.querySelectorAll("[data-el='p-card-1']").forEach((el) => {
      Object.assign(el.style, subtitleStyle);
    });

    this._root.querySelectorAll("[data-el='div-card-3']").forEach((el) => {
      this.renderTextNode(el, this.props.subtitle);
    });

    this._root.querySelectorAll("[data-el='show-card-4']").forEach((el) => {
      const whenCondition = this.props.children;
      if (whenCondition) {
        this.showContent(el);
      }
    });
  }

  // Helper to render content
  renderTextNode(el, text) {
    const textNode = document.createTextNode(text);
    if (el?.scope) {
      textNode.scope = el.scope;
    }
    if (el?.context) {
      textNode.context = el.context;
    }
    el.after(textNode);
    this.nodesToDestroy.push(el.nextSibling);
  }
}

customElements.define("card", Card);
