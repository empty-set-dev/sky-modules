import { promises as fs } from 'fs'
import path from 'path'

import {
    parseJsx,
    componentToReact,
    componentToVue,
    componentToSolid,
    componentToQwik,
    componentToSvelte,
    componentToAngular,
    componentToCustomElement,
    componentToStencil,
    componentToLit,
    componentToReactNative,
    componentToPreact,
    componentToRsc,
    componentToHtml,
    componentToLiquid,
    componentToTemplate,
    componentToMarko,
    componentToSwift,
    componentToAlpine,
    componentToTaro,
} from '@builder.io/mitosis'

const COMPONENTS_DIR = 'universal-components'
const OUTPUT_DIR = 'generated-components'

const generators = {
    react: componentToReact,
    vue: componentToVue,
    solid: componentToSolid,
    qwik: componentToQwik,
    svelte: componentToSvelte,
    angular: componentToAngular,
    customElement: componentToCustomElement,
    stencil: componentToStencil,
    lit: componentToLit,
    reactNative: componentToReactNative,
    preact: componentToPreact,
    rsc: componentToRsc,
    html: componentToHtml,
    liquid: componentToLiquid,
    template: componentToTemplate,
    marko: componentToMarko,
    swift: componentToSwift,
    alpine: componentToAlpine,
    taro: componentToTaro,
}

async function generateComponents() {
    try {
        console.log('üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –í–°–ï–• —Ç–∞—Ä–≥–µ—Ç–æ–≤!')

        // –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
        await fs.rm(OUTPUT_DIR, { recursive: true, force: true })
        await fs.mkdir(OUTPUT_DIR, { recursive: true })

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ .lite.tsx —Ñ–∞–π–ª–æ–≤
        const files = await fs.readdir(COMPONENTS_DIR)
        const liteFiles = files.filter(file => file.endsWith('.lite.tsx'))

        for (const file of liteFiles) {
            const componentName = file.replace('.lite.tsx', '')
            const filePath = path.join(COMPONENTS_DIR, file)
            const source = await fs.readFile(filePath, 'utf-8')

            console.log(
                `üì¶ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ${componentName} –¥–ª—è ${Object.keys(generators).length} —Ç–∞—Ä–≥–µ—Ç–æ–≤...`
            )

            // –ü–∞—Ä—Å–∏–º JSX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            const mitosisComponent = parseJsx(source)

            for (const [target, generator] of Object.entries(generators)) {
                try {
                    if (!generator) {
                        console.warn(`‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è ${target} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
                        continue
                    }

                    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞
                    const targetDir = path.join(OUTPUT_DIR, target)
                    await fs.mkdir(targetDir, { recursive: true })

                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∞
                    let options = { typescript: true }

                    if (target === 'react') {
                        options.stylesType = 'styled-jsx'
                    }

                    // Vue –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç namePrefix –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏
                    if (target === 'vue') {
                        options = {}
                    }

                    const generatorFunction = generator(options)

                    const generatedCode = generatorFunction({
                        component: mitosisComponent,
                        path: filePath,
                    })

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    const extensions = {
                        react: '.tsx',
                        rsc: '.tsx',
                        vue: '.vue',
                        solid: '.tsx',
                        qwik: '.tsx',
                        svelte: '.svelte',
                        angular: '.ts',
                        html: '.html',
                        swift: '.swift',
                        liquid: '.liquid',
                        template: '.html',
                        marko: '.marko',
                        taro: '.tsx',
                    }

                    const ext = extensions[target] || '.ts'
                    const outputPath = path.join(targetDir, `${componentName}${ext}`)

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
                    await fs.writeFile(outputPath, generatedCode)

                    console.log(`‚úÖ ${componentName} -> ${target} (${ext})`)
                } catch (error) {
                    console.warn(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${componentName} -> ${target}: ${error.message}`)
                }
            }
        }

        console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

        // –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        console.log('\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:')
        const targetDirs = await fs.readdir(OUTPUT_DIR)

        for (const targetDir of targetDirs) {
            const targetPath = path.join(OUTPUT_DIR, targetDir)
            const stat = await fs.stat(targetPath)

            if (stat.isDirectory()) {
                const targetFiles = await fs.readdir(targetPath)
                console.log(`  ${targetDir}/`)

                for (const targetFile of targetFiles) {
                    console.log(`    ${targetFile}`)
                }
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error)
        process.exit(1)
    }
}

generateComponents()
